/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/challenges/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Challenges
         * @description List all challenges with optional filtering and pagination.
         */
        get: operations["list_challenges_challenges__get"];
        put?: never;
        /**
         * Create Challenge
         * @description Create a new coding challenge.
         */
        post: operations["create_challenge_challenges__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/challenges/{challenge_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Challenge
         * @description Get a single challenge by ID.
         */
        get: operations["read_challenge_challenges__challenge_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Challenge
         * @description Delete a challenge.
         */
        delete: operations["delete_challenge_challenges__challenge_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Challenge
         * @description Update a challenge's metadata.
         */
        patch: operations["update_challenge_challenges__challenge_id__patch"];
        trace?: never;
    };
    "/challenges/{challenge_id}/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Challenge Conversations
         * @description Get all conversations for a specific challenge with pagination.
         */
        get: operations["get_challenge_conversations_challenges__challenge_id__conversations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Conversations
         * @description List all support conversations with optional filtering.
         */
        get: operations["list_conversations_conversations__get"];
        put?: never;
        /**
         * Create Conversation
         * @description Create a new support conversation with an optional initial post.
         */
        post: operations["create_conversation_conversations__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Conversation
         * @description Get a single conversation by ID with all its posts.
         */
        get: operations["read_conversation_conversations__conversation_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Conversation
         * @description Delete a conversation and all its posts.
         */
        delete: operations["delete_conversation_conversations__conversation_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update Conversation
         * @description Update a conversation's metadata.
         */
        patch: operations["update_conversation_conversations__conversation_id__patch"];
        trace?: never;
    };
    "/conversations/{conversation_id}/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Posts
         * @description List all posts in a conversation with pagination.
         */
        get: operations["list_posts_conversations__conversation_id__posts_get"];
        put?: never;
        /**
         * Create Post
         * @description Add a post to an existing conversation.
         */
        post: operations["create_post_conversations__conversation_id__posts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}/posts/{post_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Post
         * @description Get a specific post from a conversation.
         */
        get: operations["read_post_conversations__conversation_id__posts__post_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** User */
        get: operations["user_user__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_api_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ChallengeCreate
         * @description Schema for creating a new challenge.
         */
        ChallengeCreate: {
            /** Challenge Id */
            challenge_id: string;
            /** Title */
            title: string;
            /** Description */
            description: string;
            /** Category */
            category: string;
            difficulty: components["schemas"]["ChallengeDifficulty"];
            /**
             * Points
             * @default 0
             */
            points: number;
            /** Tags */
            tags?: string[];
            /** Learning Objectives */
            learning_objectives?: string[];
            /** Hints */
            hints?: string[];
        };
        /**
         * ChallengeDifficulty
         * @enum {string}
         */
        ChallengeDifficulty: "Beginner" | "Intermediate" | "Advanced";
        /**
         * ChallengePublic
         * @description Schema for public representation of a challenge.
         */
        ChallengePublic: {
            /** Challenge Id */
            challenge_id: string;
            /** Title */
            title: string;
            /** Description */
            description: string;
            /** Category */
            category: string;
            difficulty: components["schemas"]["ChallengeDifficulty"];
            /**
             * Points
             * @default 0
             */
            points: number;
            /** Tags */
            tags?: string[];
            /** Learning Objectives */
            learning_objectives?: string[];
            /** Hints */
            hints?: string[];
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ChallengeUpdate */
        ChallengeUpdate: {
            /** Challenge Id */
            challenge_id: string;
            /** Title */
            title: string;
            /** Description */
            description: string;
            /** Category */
            category: string;
            difficulty: components["schemas"]["ChallengeDifficulty"];
            /**
             * Points
             * @default 0
             */
            points: number;
            /** Tags */
            tags?: string[];
            /** Learning Objectives */
            learning_objectives?: string[];
            /** Hints */
            hints?: string[];
        };
        /**
         * ConversationCreate
         * @description Schema for creating a new conversation.
         */
        ConversationCreate: {
            /** Identifier */
            identifier: string;
            /** Challenge Id */
            challenge_id: number;
            /** Topic */
            topic: string;
            /** Category */
            category: string;
            /** @default OPEN */
            status: components["schemas"]["ConversationStatus"];
            /** Assignee */
            assignee?: string | null;
        };
        /**
         * ConversationPublic
         * @description Schema for public representation of a conversation.
         */
        ConversationPublic: {
            /** Identifier */
            identifier: string;
            /** Challenge Id */
            challenge_id: number;
            /** Topic */
            topic: string;
            /** Category */
            category: string;
            /** @default OPEN */
            status: components["schemas"]["ConversationStatus"];
            /** Assignee */
            assignee?: string | null;
            /** User */
            user: string;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Posts
             * @default []
             */
            posts: components["schemas"]["PostPublic"][];
        };
        /**
         * ConversationStatus
         * @enum {string}
         */
        ConversationStatus: "OPEN" | "IN_PROGRESS" | "WAITING_FOR_USER" | "RESOLVED" | "CLOSED";
        /**
         * ConversationUpdate
         * @description Schema for updating a conversation.
         */
        ConversationUpdate: {
            /** Assignee */
            assignee?: string | null;
            status?: components["schemas"]["ConversationStatus"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ListResponse[ChallengePublic] */
        ListResponse_ChallengePublic_: {
            /** Items */
            items: components["schemas"]["ChallengePublic"][];
            /** Total */
            total: number;
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
        };
        /** ListResponse[ConversationPublic] */
        ListResponse_ConversationPublic_: {
            /** Items */
            items: components["schemas"]["ConversationPublic"][];
            /** Total */
            total: number;
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
        };
        /** ListResponse[PostPublic] */
        ListResponse_PostPublic_: {
            /** Items */
            items: components["schemas"]["PostPublic"][];
            /** Total */
            total: number;
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
        };
        /**
         * PostCreate
         * @description Schema for creating a new post.
         */
        PostCreate: {
            /** Content */
            content: string;
            /** Conversation Id */
            conversation_id?: number;
        };
        /**
         * PostPublic
         * @description Schema for public representation of a post.
         */
        PostPublic: {
            /** Content */
            content: string;
            /** Conversation Id */
            conversation_id?: number;
            /** User */
            user: string;
            /** Id */
            id: number;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /** User */
        User: {
            /** User Id */
            user_id: string;
            /** Username */
            username: string;
            /** Email */
            email: string;
            role: components["schemas"]["UserRole"];
        };
        /**
         * UserRole
         * @enum {string}
         */
        UserRole: "support" | "user";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_challenges_challenges__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                difficulty?: components["schemas"]["ChallengeDifficulty"] | null;
                category?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_ChallengePublic_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_challenge_challenges__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChallengeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengePublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_challenge_challenges__challenge_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengePublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_challenge_challenges__challenge_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_challenge_challenges__challenge_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChallengeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengePublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_challenge_conversations_challenges__challenge_id__conversations_get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path: {
                challenge_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_ConversationPublic_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_conversations_conversations__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                status?: components["schemas"]["ConversationStatus"] | null;
                category?: string | null;
                challenge_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_ConversationPublic_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_conversation_conversations__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConversationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationPublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_conversation_conversations__conversation_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationPublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_conversation_conversations__conversation_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_conversation_conversations__conversation_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConversationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationPublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_posts_conversations__conversation_id__posts_get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path: {
                conversation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_PostPublic_"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_post_conversations__conversation_id__posts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostPublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_post_conversations__conversation_id__posts__post_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_id: number;
                post_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostPublic"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_user__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    health_check_api_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
